unit DataModuleCondiciondePago;

interface

uses
  SysUtils, Classes, Data.DB, MemDS, DBAccess, MSAccess;

type
  TDMCondiciondePago = class(TDataModule)
    MSCondicionPago: TMSQuery;
    MSCondicionPagoIdCondicionPago: TIntegerField;
    MSCondicionPagoIdOrganizacion: TIntegerField;
    MSCondicionPagoDescripcion: TStringField;
    MSCondicionPagoUrevUsuario: TStringField;
    MSCondicionPagoUrevFechaHora: TDateTimeField;
    MSCondicionPagoUrevCalc: TWideStringField;
    DSCondicionPago: TDataSource;
    MSCondicionPagoTipoPago: TStringField;
    procedure MSCondicionPagoAfterCancel(DataSet: TDataSet);
    procedure MSCondicionPagoAfterPost(DataSet: TDataSet);
    procedure MSCondicionPagoBeforeDelete(DataSet: TDataSet);
    procedure MSCondicionPagoBeforeEdit(DataSet: TDataSet);
    procedure MSCondicionPagoBeforeInsert(DataSet: TDataSet);
    procedure MSCondicionPagoBeforeOpen(DataSet: TDataSet);
    procedure MSCondicionPagoBeforePost(DataSet: TDataSet);
    procedure MSCondicionPagoNewRecord(DataSet: TDataSet);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

function DMCondiciondePago: TDMCondiciondePago;

implementation

{$R *.dfm}

uses
  UniGUIVars, uniGUIMainModule, MainModule, DataModulePrincipal, UnitCodigosComunesFormulario,
  FormularioCondiciondePago, FormularioCRUDMaestro, UnitValidaciones, UnitRecursoString, UnitCodigosComunesDataModule;

function DMCondiciondePago: TDMCondiciondePago;
begin
  Result := TDMCondiciondePago(UniMainModule.GetModuleInstance(TDMCondiciondePago));
end;

procedure TDMCondiciondePago.MSCondicionPagoAfterCancel(DataSet: TDataSet);
begin
  DeshabilitarControles(FrmCondiciondePago);
end;

procedure TDMCondiciondePago.MSCondicionPagoAfterPost(DataSet: TDataSet);
begin
 DeshabilitarControles(FrmCondiciondePago);
end;

procedure TDMCondiciondePago.MSCondicionPagoBeforeDelete(DataSet: TDataSet);
begin
  VerificarDatoTablaRelacionada('Definicion.CondicionPago', MSCondicionPagoIdCondicionPago, FrmCondiciondePago);
end;

procedure TDMCondiciondePago.MSCondicionPagoBeforeEdit(DataSet: TDataSet);
begin
  HabilitarControles(FrmCondiciondePago);
end;

procedure TDMCondiciondePago.MSCondicionPagoBeforeInsert(DataSet: TDataSet);
begin
HabilitarControles(FrmCondiciondePago);
end;

procedure TDMCondiciondePago.MSCondicionPagoBeforeOpen(DataSet: TDataSet);
begin
MSCondicionPago.Params.ParamByName('IdOrganizacion').Value := 1;
end;

procedure TDMCondiciondePago.MSCondicionPagoBeforePost(DataSet: TDataSet);
begin
  ValidarCampo(FrmCondiciondePago, MSCondicionPagoTipoPago, ESeleccioneTipoCondicionPago);
  ValidarCampo(FrmCondiciondePago, MSCondicionPagoDescripcion, EEscribaDescripcion);

  dmBeforePost(DataSet);
end;

procedure TDMCondiciondePago.MSCondicionPagoNewRecord(DataSet: TDataSet);
begin
MSCondicionPagoIdOrganizacion.Value := 1;
end;

initialization
  RegisterModuleClass(TDMCondiciondePago);

end.
